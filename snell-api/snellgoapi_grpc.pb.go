// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: snellgoapi.proto

package snellapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnellService_QueryStats_FullMethodName = "/snell.api.SnellService/QueryStats"
)

// SnellServiceClient is the client API for SnellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnellServiceClient interface {
	QueryStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
}

type snellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnellServiceClient(cc grpc.ClientConnInterface) SnellServiceClient {
	return &snellServiceClient{cc}
}

func (c *snellServiceClient) QueryStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, SnellService_QueryStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnellServiceServer is the server API for SnellService service.
// All implementations must embed UnimplementedSnellServiceServer
// for forward compatibility
type SnellServiceServer interface {
	QueryStats(context.Context, *StatsRequest) (*StatsReply, error)
	mustEmbedUnimplementedSnellServiceServer()
}

// UnimplementedSnellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnellServiceServer struct {
}

func (UnimplementedSnellServiceServer) QueryStats(context.Context, *StatsRequest) (*StatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStats not implemented")
}
func (UnimplementedSnellServiceServer) mustEmbedUnimplementedSnellServiceServer() {}

// UnsafeSnellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnellServiceServer will
// result in compilation errors.
type UnsafeSnellServiceServer interface {
	mustEmbedUnimplementedSnellServiceServer()
}

func RegisterSnellServiceServer(s grpc.ServiceRegistrar, srv SnellServiceServer) {
	s.RegisterService(&SnellService_ServiceDesc, srv)
}

func _SnellService_QueryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnellServiceServer).QueryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnellService_QueryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnellServiceServer).QueryStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnellService_ServiceDesc is the grpc.ServiceDesc for SnellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snell.api.SnellService",
	HandlerType: (*SnellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryStats",
			Handler:    _SnellService_QueryStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snellgoapi.proto",
}
